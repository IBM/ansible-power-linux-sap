# ------------------------------------------------------------------------
# Copyright 2021, 2022 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -------------------------------------------------------------------------
---
### this role is for validation of input sent in  disks_configuration variable. Check for valid WWNs, counts passed in ansible extra vars. Exit with error, if validation fails. 
 
- name: running rescan command 
  shell: /usr/bin/rescan-scsi-bus.sh -a -c -v

# validate each wwn provided with multipath -ll command, for its presence. fail, if any 1 doesnot match. 
- name: validating the wwn values passed 
  shell: /sbin/multipath -ll | grep {{ item }} 
  register:  validation_check  
  with_items: "{{ disks_configuration.wwns | lower }}"
  ignore_errors: true

- name: check for the results 
  fail:
    msg: "command {{ item.cmd }} failed" 
  when: item.rc==1
  with_items: "{{ validation_check.results }}"

# to get count of unique WWN
- name: validate number of wwn present 
  set_fact:
   total_wwn: "{{ disks_configuration.wwns | unique |  length }}"

# fail if total count of disks and sum of counts provided doesnot match. Also match wwn uniq values. Any duplicate, will lead to failure 
- set_fact: count_total=0
- name: get the total count as provided 
  set_fact: 
   count_total: "{{ count_total|int +item|int }}" 
  with_items: "{{ disks_configuration.counts }}"

- fail:
   msg: "Number of unique  WWN provided = {{ total_wwn }} is not equal to total count {{ count_total }} "
  when:  count_total !=  total_wwn 

# fail if count value and number of items in count, name and paths are different. 
- name: check for number of fields for counts, names and paths 
  set_fact:
   count_fields: "{{ disks_configuration.counts | length }}"
   names_fields: "{{ disks_configuration.names | length }}"
   paths_fields: "{{ disks_configuration.paths | length }}"

- fail: 
   msg: Number of inputs doesnot match, please verify INPUT
  when: 
  - count_fields != names_fields or names_fields != paths_fields
