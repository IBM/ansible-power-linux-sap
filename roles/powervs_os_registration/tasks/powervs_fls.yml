---
# get the OS registration status in RHEL vsi
- name: Check OS registration status for RHEL
  when: ansible_distribution is match("RedHat*")
  block:
    - name: Check if OS is registered (RHEL)
      ansible.builtin.shell: |
        echo -e $(subscription-manager status)
      register: os_registration_status_output
      changed_when: false

    - name: Store OS registration status (RHEL)
      ansible.builtin.set_fact:
        os_registration_status: "{{ 'not_registered' if 'Overall Status: Current' not in os_registration_status_output.stdout }}"

# get the OS registration status in SLES vsi
- name: Check OS registration status for SLES
  when: ansible_distribution is match("SLES*")
  block:
    - name: Check if OS is registered (SLES)
      ansible.builtin.shell: |
        echo -e $(SUSEConnect --status-text)
      register: os_registration_status_output
      changed_when: false

    - name: Store OS registration status (SLES)
      ansible.builtin.set_fact:
        os_registration_status: "{{ 'not_registered' if 'Not Registered' in os_registration_status_output.stdout }}"

# block executed if OS is not registered
- name: Register OS if not already registered
  when: os_registration_status == 'not_registered'
  block:
    - name: Check if /var/lib/cloud/instance/user-data.txt file is empty or missing
      ansible.builtin.stat:
        path: "/var/lib/cloud/instance/user-data.txt"
      register: user_data

    - name: Fail if user-data.txt is empty or missing
      ansible.builtin.fail:
        msg: "The file /var/lib/cloud/instance/user-data.txt is either missing or empty."
      when: not user_data.stat.exists or user_data.stat.size == 0

    # extract the rhel-cloud-init.sh or sles-cloud-init.sh execution command from /var/lib/cloud/instance/user-data.txt file
    - name: Extract *cloud-init.sh execution command
      ansible.builtin.shell: |
        grep 'cloud-init.sh' /var/lib/cloud/instance/user-data.txt | sed 's/.*\(.\.\s\/\)/\1/'
      register: os_registration_command
      failed_when: os_registration_command.stdout_lines | length == 0
      changed_when: false

    # execute the rhel-cloud-init.sh or sles-cloud-init.sh script
    - name: Execute script cloud init script
      ansible.builtin.shell: "{{ os_registration_command.stdout }}"

    # recheck the os registration status after the init script execution in RHEL/SLES vsi
    - name: Re-check OS registration status on RHEL
      when: ansible_distribution is match("RedHat*")
      block:
        - name: Re-check if OS is registered (RHEL)
          ansible.builtin.shell: |
            echo -e $(subscription-manager status)
          register: os_registration_status_output
          changed_when: false

        - name: Update OS registration status (RHEL)
          ansible.builtin.set_fact:
            os_registration_status: "{{ 'not_registered' if 'Overall Status: Current' not in os_registration_status_output.stdout }}"

    - name: Re-check OS registration status on SLES
      when: ansible_distribution is match("SLES*")
      block:
        - name: Re-check if OS is registered (SLES)
          ansible.builtin.shell: |
            echo -e $(SUSEConnect --status-text)
          register: os_registration_status_output
          changed_when: false

        - name: Update OS registration status (SLES)
          ansible.builtin.set_fact:
            os_registration_status: "{{ 'not_registered' if 'Not Registered' in os_registration_status_output.stdout }}"

    # execute the following steps if the os is still not registered
    - name: Display logs for OS registration failure
      when: os_registration_status == 'not_registered'
      block:
        - name: Extract contents of /var/log/powervs-fls-dev.log
          ansible.builtin.shell: cat /var/log/powervs-fls-dev.log
          register: powervs_fls_dev_log
          changed_when: false

        - name: Extract contents of /var/log/powervs-fls.log
          ansible.builtin.shell: cat /var/log/powervs-fls.log
          register: powervs_fls_log
          changed_when: false

        - name: Display log contents
          ansible.builtin.debug:
            msg:
              - "powervs-fls.log contents: {{ powervs_fls_log.stdout }}"
              - "powervs-fls-dev.log contents: {{ powervs_fls_dev_log.stdout }}"
